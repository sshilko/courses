# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    cache_adapter: cache.adapter.apcu

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            bool $isDebug: '%kernel.debug%'
            #argument available in all services
            globalArgumentFoo: 'bar'
           #Psr\Log\LoggerInterface $mdLogger: '@monolog.logger.markdown'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    #Autowiring Interface, explicitly specifying which implementation to wire to
    App\Util\SayWhatInterface: '@App\Services\HelloWorldService'
    #App\Util\SayWhatInterface: '@App\Services\GoodbyeWorldService'

    ## this is service id
    my.markdownhelper:
        class: App\Services\HelloWorldService
        public: true

#    App\Services\MarkdownHelper:
#        #arguments:
#        bind:
#            $isDebug: '%kernel.debug%'

    # this is also service id (with blankspace) "service + argument name" typehinting
    # same as with _default: binding
    Psr\Log\LoggerInterface $mdLogger: '@monolog.logger.markdown'

    #When using a service definition prototype,
    #if only one service is discovered that implements an interface,
    #and that interface is also discovered in the same file,
    #configuring the alias is not mandatory and Symfony will automatically create one.

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
